AWSTemplateFormatVersion: 2010-09-09
Description: (SOCA) - Deploy master host.
Parameters:
  AppVolume:
    Type: String

  DataVolume:
    Type: String

  SubnetId:
    Type: AWS::EC2::Subnet::Id

  SecurityGroupId:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: For security reason, limit SSH to known networks

  SSHKeyPair:
    Type: AWS::EC2::KeyPair::KeyName

  SchedulerInstanceType:
    Type: String

  SchedulerIAMInstanceProfile:
    Type: String

  S3InstallFolder:
    Type: String

  S3Bucket:
    Type: String

  S3PatchFolder:
    Type: String

  S3PatchBucket:
    Type: String

  ClusterId:
    Type: String

  ImageId:
    Type: String

  AppsSnapId:
    Type: String

  BaseOS:
    Type: String

  Version:
    Type: String

  UserName:
    Type: String

  UserPassword:
    Type: String

  SchedulerPublicIP:
    Type: String

  SchedulerPublicIPAllocation:
    Type: String


Conditions:
  UseAmazonLinux: !Equals [ !Ref BaseOS, 'amazonlinux2']

Resources:
  SchedulerEC2Host:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      DisableApiTermination: false
      InstanceType: !Ref SchedulerInstanceType
      IamInstanceProfile:
        Ref: SchedulerIAMInstanceProfile
      BlockDeviceMappings:
        - DeviceName: !If [UseAmazonLinux, "/dev/xvda", "/dev/sda1"]
          Ebs:
            VolumeSize: !Ref DataVolume
            VolumeType: gp2
            Encrypted: true
        - DeviceName: "/dev/sdf"
          Ebs:
            VolumeSize: !Ref AppVolume
            VolumeType: gp2
            SnapshotId: !Ref AppsSnapId

      KeyName: !Ref SSHKeyPair
      SecurityGroupIds: !Ref SecurityGroupId
      SubnetId: !Ref SubnetId

      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-Scheduler
        - Key: soca:KeepForever
          Value: true
        - Key: soca:ClusterId
          Value: !Sub ${ClusterId}
        - Key: soca:NodeType
          Value: scheduler
        - Key: soca:BackupPlan
          Value: !Sub ${ClusterId}

      UserData:
          "Fn::Base64": !Sub |
            #!/bin/bash -xe

            export PATH=$PATH:/usr/local/bin
            AWS=$(which aws)
            echo export "SOCA_BASE_OS=${BaseOS}" >> /etc/environment
            echo export "SOCA_CONFIGURATION=${ClusterId}" >> /etc/environment
            echo export "AWS_DEFAULT_REGION=${AWS::Region}" >> /etc/environment
            echo export "SOCA_INSTALL_BUCKET=${S3Bucket}" >> /etc/environment
            echo export "SOCA_INSTALL_BUCKET_FOLDER=${S3InstallFolder}" >> /etc/environment
            echo export "SOCA_PATCH_BUCKET=${S3PatchBucket}" >> /etc/environment
            echo export "SOCA_PATCH_BUCKET_FOLDER=${S3PatchFolder}" >> /etc/environment
            echo export "SOCA_VERSION=${Version}" >> /etc/environment
            echo export "SOCA_INSTALL_AMI=${ImageId}" >> /etc/environment
            echo export "DCV_USERNAME=${UserName}">> /etc/environment
            source /etc/environment

            # Tag EBS disks manually as CFN ASG does not support it
            AWS_AVAIL_ZONE=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)
            AWS_REGION="`echo \"$AWS_AVAIL_ZONE\" | sed "s/[a-z]$//"`"
            AWS_INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
            EBS_IDS=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values="$AWS_INSTANCE_ID" --region $AWS_REGION --query "Volumes[*].[VolumeId]" --out text | tr "\n" " ")
            $AWS ec2 create-tags --resources $EBS_IDS --region $AWS_REGION --tags Key=Name,Value="${ClusterId} Root Disk" "Key=soca:ClusterId,Value=${ClusterId}"

            # Tag Network Adapter for the Scheduler
            ENI_IDS=$(aws ec2 describe-network-interfaces --filters Name=attachment.instance-id,Values="$AWS_INSTANCE_ID" --region $AWS_REGION --query "NetworkInterfaces[*].[NetworkInterfaceId]" --out text | tr "\n" " ")
            $AWS ec2 create-tags --resources $ENI_IDS --region $AWS_REGION --tags Key=Name,Value="${ClusterId} Scheduler Network Adapter" "Key=soca:ClusterId,Value=${ClusterId}"

            echo "@reboot /bin/bash /root/SchedulerPostReboot.sh ${S3Bucket} ${S3InstallFolder} ${UserName} '${UserPassword}' ${S3PatchBucket} ${S3PatchFolder} >> /root/PostRebootConfig.log 2>&1" | crontab -
            /bin/bash /root/Scheduler.sh >> /root/Scheduler.sh.log 2>&1

  EIPAssociationToScheduler:
    DependsOn: SchedulerEC2Host
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP: !Ref SchedulerPublicIP
      InstanceId: !Ref SchedulerEC2Host

Outputs:
  SchedulerInstanceId:
    Value: !Ref SchedulerEC2Host
  SchedulerPrivateIP:
    Value: !GetAtt SchedulerEC2Host.PrivateIp
  SchedulerPrivateDnsName:
    Value: !GetAtt SchedulerEC2Host.PrivateDnsName